local resourceName = getResourceName(getThisResource())
local x, y = guiGetScreenSize()
local sx, sy = x/1920, y/1080
local dr,dg,db, sdr, sdg, sdb, cdr, cdg, cdb = 2, 101, 3, 1, 159, 4, 1, 206, 4
local ar,ag,ab, sar, sag, sab, car, cag, cab = 138, 8, 8, 223, 1, 1, 250, 88, 88
local oneTabIsOpen = false
local clickFixer = false
local itemText = {}

function showSelfMenu ()
    self = DGS:dgsDxCreateWindow(787*sx, 0*sy, 346*sx, 108*sy, "", false)
	DGS:dgsDxWindowSetMovable ( self, false )
    DGS:dgsDxWindowSetSizable ( self, false )

    local info = DGS:dgsDxCreateImage(24*sx, (30-23)*sy, 62*sx, 66*sy, ":reallife_server/images/self/info.png", false, self)
    local settings = DGS:dgsDxCreateImage(100*sx, (30-23)*sy, 73*sx, 68*sy, ":reallife_server/images/self/settings.png", false, self)
    local admin = DGS:dgsDxCreateImage(260*sx, (30-23)*sy, 62*sx, 66*sy, ":reallife_server/images/self/admin.png", false, self)
    local shop = DGS:dgsDxCreateImage(187*sx, (30-23)*sy, 62*sx, 66*sy, ":reallife_server/images/self/shop.png", false, self)
    setElementClicked ( true )
    showCursor(true)

    -- // Events //
    addEventHandler("onClientDgsDxWindowClose", self,closeSelfMenu)
    addEventHandler ( "onClientDgsDxMouseClick", info, showInfoWindow )
    addEventHandler ( "onClientDgsDxMouseClick", settings,  showSettingsWindow )
	addEventHandler ( "onClientDgsDxMouseClick", shop,  showShopWindow )
	

end
addEvent ( "ShowSelfClickMenue", true)
addEventHandler ( "ShowSelfClickMenue", getLocalPlayer(),  showSelfMenu)

function closeSelfMenu ()
    setElementClicked ( false )
    showCursor(false)

end

function oneTabClose ()
    oneTabIsOpen = false
	outputChatBox("Close")
	DGS:dgsDxWindowSetCloseButtonEnabled(self, true)
	if source == infoWindow then
		killTimer(refreshBar)
	end
	if source == shopWindow then
		DGS:dgsDxGUICloseWindow(shopDesc)
	end
end

function showInfoWindow ()
    if oneTabIsOpen == false then
		infoWindow = DGS:dgsDxCreateWindow(0.38, 0.12, 0.24, 0.33, "", true)
		DGS:dgsDxWindowSetMovable ( infoWindow, false )
		DGS:dgsDxWindowSetSizable ( infoWindow, false )
		DGS:dgsDxWindowSetCloseButtonEnabled(self, false)
        addEventHandler("onClientDgsDxWindowClose", infoWindow,oneTabClose)
        local infoTabMenuMain = DGS:dgsDxCreateTabPanel(0.03, 0.08, 0.95, 0.90, true, infoWindow)
        local infoTabMenuMainPlayer = DGS:dgsDxCreateTab("Informationen",infoTabMenuMain)
        oneTabIsOpen = true
        -- // Daten zeigen //
			local licenseState = {}
			licenseState[1] = {name = "Personalausweis", elementName = "perso"}
			licenseState[2] = {name = "Führerschein", elementName = "carlicense"}
			licenseState[3] = {name = "Motorradschein", elementName = "bikelicense"}
			licenseState[4] = {name = "Fischer-Schein", elementName = "fishinglicense"}
			licenseState[5] = {name = "LKW-Schein", elementName = "lkwlicense"}
			licenseState[6] = {name = "Waffenschein", elementName = "gunlicense"}
			licenseState[7] = {name = "Motorbootschein", elementName = "motorbootlicense"}
			licenseState[8] = {name = "Segelbootschein", elementName = "segellicense"}
			licenseState[9] = {name = "Flugschein B", elementName = "planelicenseb"}
			licenseState[10] = {name = "Flugschein A", elementName = "planelicensea"}
			licenseState[11] = {name = "Helikopter-Lizens", elementName = "helilicense"}

        local job = jobNames[vioClientGetElementData ( "job" )]
        local fraktion = tonumber ( getElementData ( lp, "fraktion" ) )
        local fraktion = fraktionsNamen[fraktion]
        if not fraktion then
            fraktion = "Zivilist"
        end
        if not job then
            job = "Arbeitslos"
        end
        local playtime = getElementData ( lp, "playingtime" )
        local playtimehours = math.floor(playtime/60)
        local playtimeminutes = playtime-playtimehours*60
        if playtimeminutes < 10 then
            playtimeminutes = "0"..playtimeminutes
        end
        local playtime = playtimehours..":"..playtimeminutes
        local gwd = vioClientGetElementData ( "armyperm10" )
        if not gwd then
            gwd = "0 %"
        else
            gwd = gwd.." %"
        end
        DGS:dgsDxCreateLabel(0.02, 0.03, 0.48, 0.94, "Spielzeit: "..playtime.."\n\nFraktion: "..fraktion.."\n\nStatus:\n\nJob: "..job.."\n\nGWD: "..gwd.."\n\nGeld(Bar/Bank): "..mymoney.."/"..vioClientGetElementData("bankmoney").." $", true, infoTabMenuMainPlayer)
        local licenseList = DGS:dgsDxCreateGridList(0.52, 0.02, 0.46, 0.94, true, infoTabMenuMainPlayer)
        local licenseListLicense = DGS:dgsDxGridListAddColumn( licenseList, "Schein", 0.7 )
        local licenseListState = DGS:dgsDxGridListAddColumn( licenseList, "Status", 0.2 )
        for var, license in ipairs(licenseState) do
            local row = DGS:dgsDxGridListAddRow ( licenseList )
            if vioClientGetElementData ( license.elementName ) == 1 then
                state = "[x]"
            else
                state = "[_]"
            end
            DGS:dgsDxGridListSetItemText ( licenseList, row, licenseListLicense, license.name , false, false )
            DGS:dgsDxGridListSetItemText ( licenseList, row, licenseListState, state , false, false )
        end
		local level = getElementData ( getLocalPlayer(), "MainLevel")
		local infoTabMenuLevel = DGS:dgsDxCreateTab("Level",infoTabMenuMain)
		local levelInfo = DGS:dgsDxCreateProgressBar(0.02, 0.05, 0.95, 0.11, true, infoTabMenuLevel)  
		if level < 30 then
			xpRelativ = getElementData(getLocalPlayer(),"MainXP")/levelSys[level +1]*100
		else
			xpRelativ = 100
		end
		DGS:dgsDxProgressBarSetProgress(levelInfo,xpRelativ)
		print(xpRelativ)
		if level < 30 then
			levelReal = level
		else
			levelReal = "//"
		end
		DGS:dgsDxCreateLabel(0.36, 0.19, 0.29, 0.12, "Fortschritt bis Level "..levelReal, true, infoTabMenuLevel)
		local prestigeInfo = DGS:dgsDxCreateProgressBar(0.02, 0.34, 0.95, 0.11, true, infoTabMenuLevel ) 
		if level < 30 then		
			DGS:dgsDxProgressBarSetProgress(prestigeInfo,level/maxlevel*100)
		else
			DGS:dgsDxProgressBarSetProgress(prestigeInfo,100)
		end
		local goPrestigeButton = DGS:dgsDxCreateButton(0.34, 0.48, 0.32, 0.11, "Prestige "..(getElementData ( player, "pLevel")+1).." gehen", true,  infoTabMenuLevel, nil, nil, nil, nil, nil, nil, tocolor(dr,dg,db),tocolor(sdr, sdg, sdb),tocolor(cdr, cdg, cdb))
		addEventHandler ( "onClientDgsDxMouseClick", goPrestigeButton, goPrestige )
		DGS:dgsDxCreateLabel(0.02, 0.62, 0.38, 0.25, "Nächste Prestige Belohnung:", true, infoTabMenuLevel)    
		if level == maxlevel then
			DGS:dgsDxGUISetEnabled(goPrestigeButton, true)
		else
			DGS:dgsDxGUISetEnabled(goPrestigeButton, false)
		end
		local infoTabMenuSupport = DGS:dgsDxCreateTab("Support",infoTabMenuMain)
		
		
		DGS:dgsDxCreateLabel(0.32, 0.03, 0.36, 0.07, "Permanenter Supporttoken: ", true, infoTabMenuSupport)
        permToken = DGS:dgsDxCreateLabel(0.44, 0.14, 0.10, 0.07, "nil", true, infoTabMenuSupport)
		triggerServerEvent ( "getSecturityToken", getLocalPlayer() )
        copyPermToken = DGS:dgsDxCreateButton(0.41, 0.25, 0.16, 0.09, "Kopieren", true, infoTabMenuSupport)
        DGS:dgsDxCreateLabel(0.31, 0.37, 0.36, 0.07, "Temporärer Supporttoken:", true, infoTabMenuSupport)
		tempToken = DGS:dgsDxCreateLabel(0.43, 0.47, 0.10, 0.07, playerTempToken, true, infoTabMenuSupport)
        copyTempToken = DGS:dgsDxCreateButton(0.41, 0.58, 0.16, 0.09, "Kopieren", true, infoTabMenuSupport)
        nextTempToken = DGS:dgsDxCreateProgressBar(0.02, 0.83, 0.95, 0.12, true, infoTabMenuSupport)
        DGS:dgsDxCreateLabel(0.02, 0.72, 0.47, 0.07, "Nächster temporärer Supporttoken:", true, infoTabMenuSupport)    
		
		addEventHandler("onClientDgsDxMouseClick", copyPermToken,
	    function ()
			setClipboard(DGS:dgsDxGUIGetText(permToken))
	    end
		)
		
		addEventHandler("onClientDgsDxMouseClick", copyTempToken,
		function ()
			setClipboard(DGS:dgsDxGUIGetText(tempToken))
		end
		)
		refreshBar = setTimer ( function()
			local remaining, executesRemaining, totalExecutes = getTimerDetails(resetToken)
			local remainTime = (60000*60)/remaining*100
			DGS:dgsDxProgressBarSetProgress(nextTempToken,remainTime)
		end, 1000, 0 )
    end
end
function showSettingsWindow ()
    if oneTabIsOpen == false then
        local settingsWindow = DGS:dgsDxCreateWindow(0.38, 0.12, 0.24, 0.33, "Einstellung", true)
		DGS:dgsDxWindowSetMovable ( settingsWindow, false )
		DGS:dgsDxWindowSetSizable ( settingsWindow, false )
		DGS:dgsDxWindowSetCloseButtonEnabled(self, false)
        addEventHandler("onClientDgsDxWindowClose", settingsWindow,oneTabClose)
        oneTabIsOpen = true
        DGS:dgsDxCreateLabel(0.02, 0.08, 0.64, 0.04, "Die momentane Farbe zeigt den momentanen Status.", true, settingsWindow)
        

        settingsButton = {}
        settingsButton.settingID = {}
        settingsButton["reset"] = DGS:dgsDxCreateButton(0.41, 0.87, 0.19, 0.10, "Einstellungen\nresetten", true, settingsWindow, nil, nil, nil, nil, nil, nil, tocolor(dr,dg,db),tocolor(sdr, sdg, sdb),tocolor(cdr, cdg, cdb))
        settingsButton["betamap"] = DGS:dgsDxCreateButton(0.02, 0.16, 0.25, 0.13, "Experimenteles\nMap-Streaming ", true, settingsWindow)
        settingsButton["gwhit"] = DGS:dgsDxCreateButton(0.29, 0.16, 0.25, 0.13, "Gangwar\nHitmarker", true, settingsWindow)
        settingsButton["sethud"] = DGS:dgsDxCreateButton(0.56, 0.16, 0.25, 0.06, "HUD setzen:", true, settingsWindow)
        sethudID = DGS:dgsDxCreateEdit(0.56, 0.24, 0.25, 0.05, "", true, settingsWindow)
        DGS:dgsDxGUISetEnabled ( sethudID, false )
        DGS:dgsDxGUISetEnabled ( settingsButton["sethud"], false )
        settingsButton["joinmsg"] =  DGS:dgsDxCreateButton(0.02, 0.32, 0.25, 0.13, "Nachricht beim\nbeitretten", true, settingsWindow)

        -- // Buttons Setting ID zuweisen //

			settingsButton.settingID[settingsButton["betamap"]] = 3
			settingsButton.settingID[settingsButton["gwhit"]] = 9
			settingsButton.settingID[settingsButton["joinmsg"]] = 1
			settingsButton.settingID[settingsButton["sethud"]] = 2
			
			
        -- // Setting Status checken //

			checkSettingStates ()
			addEventHandler ( "onClientDgsDxMouseClick", settingsButton["reset"], deleteSettings )
			for var, button in pairs(settingsButton) do
				addEventHandler ( "onClientDgsDxMouseClick", button, changeSettingButton )
			end
        end
end


function showShopWindow () 
	if oneTabIsOpen == false then
		oneTabIsOpen = true
		local coins, premTime, pack, prem = triggerServerEvent ( "getPremiumData", getLocalPlayer() )
		print("WIN: "..coins..","..premTime..", "..pack..", "..prem)
		local shopWindow = DGS:dgsDxCreateWindow(0.37, 0.12, 0.25, 0.32, "Shop", true)
		DGS:dgsDxWindowSetMovable ( shopWindow, false )
		DGS:dgsDxWindowSetSizable ( shopWindow, false )
		DGS:dgsDxWindowSetCloseButtonEnabled(self, false)
		DGS:dgsDxCreateLabel(0.03, 0.02, 0.19, 0.06, "Deine Coins: "..coins, true, shopWindow)
		if prem == false then
			local premState = "Nicht aktiv"
		else
			local premState = prem.." bis zum "..getData(premTime)
		end
		DGS:dgsDxCreateLabel(0.48, 0.02, 0.50, 0.06, "Premium-Status: "..premState, true, shopWindow)
		local shopWindowTab = DGS:dgsDxCreateTabPanel(0.03, 0.11, 0.95, 0.80, true, shopWindow)
        local shopWindowTabItems1 = DGS:dgsDxCreateTab("Items",shopWindowTab)
		local premiumAuto = DGS:dgsCreateCheckBox(0.02, 0.03, 0.96, 0.11, "Premium-Paket ggf automatich nach Ablauf verlängern",false,true,shopWindowTabItems1)
		addEventHandler("onClientDgsDxWindowClose", shopWindow, oneTabClose)
		
		if getSetting (7, 1) == 1 then
			DGS:dgsCheckBoxSetSelected(premiumAuto,true)
		end
		
		local items = DGS:dgsCreateGridList (0.02, 0.14, 0.96, 0.79, true, shopWindowTabItems1  )
		local id = DGS:dgsGridListAddColumn( items, "ID", 0.2 ) 
		local name = DGS:dgsGridListAddColumn( items, "Name", 0.4 ) 
		local preis = DGS:dgsGridListAddColumn( items, "Preis", 0.3 ) 
		
		for var, item in ipairs(shopItems) do
            local row = DGS:dgsDxGridListAddRow ( items )
			DGS:dgsDxGridListSetItemText ( items, row, id, var , false, false )
            DGS:dgsDxGridListSetItemText ( items, row, name, item.name , false, false )
            DGS:dgsDxGridListSetItemText ( items, row, preis, item.preis , false, false )
			itemText[tonumber(var)] = tostring(item.text)
        end
		
		
		-- Item
		local shopDesc = DGS:dgsDxCreateWindow(0.20, 0.19, 0.15, 0.22, "Beschreibung", true)
		DGS:dgsDxWindowSetMovable ( shopDesc, false )
		DGS:dgsDxWindowSetSizable ( shopDesc, false )
		desc = DGS:dgsCreateMemo(0.06, 0.11, 0.88, 0.71,"",true,shopDesc)
		DGS:dgsMemoSetReadOnly(desc, true )
		DGS:dgsDxCreateButton(0.06, 0.86, 0.31, 0.09, "Hinzufügen", true, shopDesc, nil, nil, nil, nil, nil, nil, tocolor(1,223,1), tocolor(4,170,4), tocolor(4,170,4) )  
		DGS:dgsWindowSetCloseButtonEnabled(shopDesc,false)
		addEventHandler ( "onClientDgsDxMouseClick", root, function (cmd, state)
			if source == items then 
				if state == "down" then
					local Selected = DGS:dgsGridListGetSelectedItem(items)
					if Selected ~= -1 then 
						local id = DGS:dgsGridListGetItemText(items,Selected, 1)
						DGS:dgsClear(desc)
						DGS:dgsSetText(desc,itemText[tonumber(id)])
					end
				end
			end
		end )

		addEventHandler( "onDgsCheckBoxChange", premiumAuto,
		function ( current, previous )
			if current == true then
				changeSetting (7, 1, 1)
			else
				changeSetting (7, 1, 0)
			end
		end
		)

		-- getSetting (id, typ)
	end
end





function checkSettingStates ()
	for var, button in pairs(settingsButton) do
            if tonumber(settingsButton.settingID[button]) then
                local var = getSetting (settingsButton.settingID[button], 1)
                if tonumber(var) == 1 then
                   DGS:dgsDxGUISetProperty(button,"color", {tocolor( dr,dg,db ), tocolor( sdr, sdg, sdb ), tocolor( cdr, cdg, cdb )} )
                else
                   DGS:dgsDxGUISetProperty(button,"color", {tocolor( ar,ag,ab ), tocolor( sar, sag, sab ), tocolor( car, cag, cab )} )
                end
				
            end
        end	
	end
	
function changeSettingButton (button, state)
--	print(tonumber(settingsButton.settingID[source]))
	if state == "down" then
		local var = getSetting (tonumber(settingsButton.settingID[source]), 1)
		if var == 1 then
			newstate = 0
		else
			newstate = 1 
		end
		changeSetting (tonumber(settingsButton.settingID[source]), 1, newstate)
		checkSettingStates ()

	end
end
		
function goPrestige (button, state)
	if state == "down" then
		if triggerServerEvent ( "goPrestige", resourceRoot) == true then
			DGS:dgsDxGUICloseWindow(infoWindow)
		else
			print("Error")
		end
	end
end


function setPermToken (token)
	DGS:dgsDxGUISetText(permToken, token)
end
addEvent ( "setPermToken", true )
addEventHandler ( "setPermToken", getRootElement(), setPermToken )